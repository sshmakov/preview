// This file implements the IPreviewHandler Interface and Gateway for Python.
// Generated by makegw.py

#include "shell_pch.h"
#include "prtypes.h"
#include "PyIPreviewHandler.h"
#include "PythonCOMRegister.h" // For simpler registration of IIDs etc.

// @doc - This file contains autoduck documentation
// ---------------------------------------------------
//
// Interface Implementation

PyIPreviewHandler::PyIPreviewHandler(IUnknown *pdisp):
	PyIUnknown(pdisp)
{
	ob_type = &type;
}

PyIPreviewHandler::~PyIPreviewHandler()
{
}

/* static */ IPreviewHandler *PyIPreviewHandler::GetI(PyObject *self)
{
	return (IPreviewHandler *)PyIUnknown::GetI(self);
}

// @pymethod |PyIPreviewHandler|SetWindow|Description of SetWindow.
PyObject *PyIPreviewHandler::SetWindow(PyObject *self, PyObject *args)
{
	IPreviewHandler *pIPH = GetI(self);
	if ( pIPH == NULL )
		return NULL;
	// @pyparm int/long|hwnd||Description for hwnd
// *** The input argument prc of type "CRECTPTR" was not processed ***
//     Please check the conversion function is appropriate and exists!
	RECT prc;
	PyObject *obprc;
	// @pyparm <o PyCRECTPTR>|prc||Description for prc
	PyObject *obhwnd;
	HWND hwnd;
	if ( !PyArg_ParseTuple(args, "OO:SetWindow", &obhwnd, &obprc) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyWinLong_AsULONG_PTR(obhwnd, (ULONG_PTR *)&hwnd)) bPythonIsHappy = FALSE;
	if (bPythonIsHappy && !PyObject_AsRECT( obprc, &prc )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPH->SetWindow( hwnd, &prc );
	//PyObject_FreeCRECTPTR(prc);

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPH, IID_IPreviewHandler );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIPreviewHandler|SetRect|Description of SetRect.
PyObject *PyIPreviewHandler::SetRect(PyObject *self, PyObject *args)
{
	IPreviewHandler *pIPH = GetI(self);
	if ( pIPH == NULL )
		return NULL;
// *** The input argument prc of type "CRECTPTR" was not processed ***
//     Please check the conversion function is appropriate and exists!
	RECT prc;
	PyObject *obprc;
	// @pyparm <o PyCRECTPTR>|prc||Description for prc
	if ( !PyArg_ParseTuple(args, "O:SetRect", &obprc) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsRECT( obprc, &prc )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPH->SetRect( &prc );
	//PyObject_FreeCRECTPTR(prc);

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPH, IID_IPreviewHandler );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIPreviewHandler|DoPreview|Description of DoPreview.
PyObject *PyIPreviewHandler::DoPreview(PyObject *self, PyObject *args)
{
	IPreviewHandler *pIPH = GetI(self);
	if ( pIPH == NULL )
		return NULL;
	if ( !PyArg_ParseTuple(args, ":DoPreview") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPH->DoPreview( );

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPH, IID_IPreviewHandler );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIPreviewHandler|Unload|Description of Unload.
PyObject *PyIPreviewHandler::Unload(PyObject *self, PyObject *args)
{
	IPreviewHandler *pIPH = GetI(self);
	if ( pIPH == NULL )
		return NULL;
	if ( !PyArg_ParseTuple(args, ":Unload") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPH->Unload( );

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPH, IID_IPreviewHandler );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIPreviewHandler|SetFocus|Description of SetFocus.
PyObject *PyIPreviewHandler::SetFocus(PyObject *self, PyObject *args)
{
	IPreviewHandler *pIPH = GetI(self);
	if ( pIPH == NULL )
		return NULL;
	if ( !PyArg_ParseTuple(args, ":SetFocus") )
		return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPH->SetFocus( );

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPH, IID_IPreviewHandler );
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIPreviewHandler|QueryFocus|Description of QueryFocus.
PyObject *PyIPreviewHandler::QueryFocus(PyObject *self, PyObject *args)
{
	IPreviewHandler *pIPH = GetI(self);
	if ( pIPH == NULL )
		return NULL;
// *** The input argument phwnd of type "HWNDPTR" was not processed ***
//     Please check the conversion function is appropriate and exists!
	HWND phwnd;
	PyObject *obphwnd;
	// @pyparm <o PyHWNDPTR>|phwnd||Description for phwnd
	if ( !PyArg_ParseTuple(args, "O:QueryFocus", &obphwnd) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyWinObject_AsHANDLE( obphwnd, (HANDLE *)&phwnd )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPH->QueryFocus( &phwnd );
	//PyObject_FreeHWNDPTR(phwnd);

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPH, IID_IPreviewHandler );
// *** The output argument phwnd of type "HWNDPTR" was not processed ***
//     The type 'HWNDPTR' (phwnd) is unknown.
	Py_INCREF(Py_None);
	return Py_None;

}

// @pymethod |PyIPreviewHandler|TranslateAccelerator|Description of TranslateAccelerator.
PyObject *PyIPreviewHandler::TranslateAccelerator(PyObject *self, PyObject *args)
{
	IPreviewHandler *pIPH = GetI(self);
	if ( pIPH == NULL )
		return NULL;
// *** The input argument pmsg of type "MSGPTR" was not processed ***
//     Please check the conversion function is appropriate and exists!
	MSG pmsg;
	PyObject *obpmsg;
	// @pyparm <o PyMSGPTR>|pmsg||Description for pmsg
	if ( !PyArg_ParseTuple(args, "O:TranslateAccelerator", &obpmsg) )
		return NULL;
	BOOL bPythonIsHappy = TRUE;
	if (bPythonIsHappy && !PyObject_AsMSG( obpmsg, &pmsg )) bPythonIsHappy = FALSE;
	if (!bPythonIsHappy) return NULL;
	HRESULT hr;
	PY_INTERFACE_PRECALL;
	hr = pIPH->TranslateAccelerator( &pmsg );
	//PyObject_FreeMSGPTR(pmsg);

	PY_INTERFACE_POSTCALL;

	if ( FAILED(hr) )
		return PyCom_BuildPyException(hr, pIPH, IID_IPreviewHandler );
	Py_INCREF(Py_None);
	return Py_None;

}

// @object PyIPreviewHandler|Description of the interface
static struct PyMethodDef PyIPreviewHandler_methods[] =
{
	{ "SetWindow", PyIPreviewHandler::SetWindow, 1 }, // @pymeth SetWindow|Description of SetWindow
	{ "SetRect", PyIPreviewHandler::SetRect, 1 }, // @pymeth SetRect|Description of SetRect
	{ "DoPreview", PyIPreviewHandler::DoPreview, 1 }, // @pymeth DoPreview|Description of DoPreview
	{ "Unload", PyIPreviewHandler::Unload, 1 }, // @pymeth Unload|Description of Unload
	{ "SetFocus", PyIPreviewHandler::SetFocus, 1 }, // @pymeth SetFocus|Description of SetFocus
	{ "QueryFocus", PyIPreviewHandler::QueryFocus, 1 }, // @pymeth QueryFocus|Description of QueryFocus
	{ "TranslateAccelerator", PyIPreviewHandler::TranslateAccelerator, 1 }, // @pymeth TranslateAccelerator|Description of TranslateAccelerator
	{ NULL }
};

PyComTypeObject PyIPreviewHandler::type("PyIPreviewHandler",
		&PyIUnknown::type,
		sizeof(PyIPreviewHandler),
		PyIPreviewHandler_methods,
		GET_PYCOM_CTOR(PyIPreviewHandler));
// ---------------------------------------------------
//
// Gateway Implementation
STDMETHODIMP PyGPreviewHandler::SetWindow(
		/* [in] */ HWND hwnd,
		/* [in] */ CRECTPTR prc)
{
	PY_GATEWAY_METHOD;
// *** The input argument prc of type "CRECTPTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'CRECTPTR' (prc) is unknown.
	PyObject *obprc = PyObject_FromRECT(prc);
	if (obprc==NULL) return MAKE_PYCOM_GATEWAY_FAILURE_CODE("SetWindow");
	PyObject *obhwnd;
	obhwnd = PyWinObject_FromULONG_PTR((ULONG_PTR)hwnd);
	HRESULT hr=InvokeViaPolicy("SetWindow", NULL, "OO", obhwnd, obprc);
	Py_XDECREF(obhwnd);
	Py_DECREF(obprc);
	return hr;
}

STDMETHODIMP PyGPreviewHandler::SetRect(
		/* [in] */ CRECTPTR prc)
{
	PY_GATEWAY_METHOD;
// *** The input argument prc of type "CRECTPTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'CRECTPTR' (prc) is unknown.
	PyObject *obprc = PyObject_FromRECT(prc);
	if (obprc==NULL) return MAKE_PYCOM_GATEWAY_FAILURE_CODE("SetRect");
	HRESULT hr=InvokeViaPolicy("SetRect", NULL, "O", obprc);
	Py_DECREF(obprc);
	return hr;
}

STDMETHODIMP PyGPreviewHandler::DoPreview(
		void)
{
	PY_GATEWAY_METHOD;
	HRESULT hr=InvokeViaPolicy("DoPreview", NULL);
	return hr;
}

STDMETHODIMP PyGPreviewHandler::Unload(
		void)
{
	PY_GATEWAY_METHOD;
	HRESULT hr=InvokeViaPolicy("Unload", NULL);
	return hr;
}

STDMETHODIMP PyGPreviewHandler::SetFocus(
		void)
{
	PY_GATEWAY_METHOD;
	HRESULT hr=InvokeViaPolicy("SetFocus", NULL);
	return hr;
}

STDMETHODIMP PyGPreviewHandler::QueryFocus(
		/* [out] */ HWNDPTR phwnd)
{
	PY_GATEWAY_METHOD;
	PyObject *result;
	HRESULT hr=InvokeViaPolicy("QueryFocus", &result);
	if (FAILED(hr)) return hr;
	// Process the Python results, and convert back to the real params
// *** The output argument phwnd of type "HWNDPTR" was not processed ***
//     The type 'HWNDPTR' (phwnd) is unknown.
	Py_DECREF(result);
	return hr;
}

STDMETHODIMP PyGPreviewHandler::TranslateAccelerator(
		/* [in] */ MSGPTR pmsg)
{
	PY_GATEWAY_METHOD;
// *** The input argument pmsg of type "MSGPTR" was not processed ***
//   - Please ensure this conversion function exists, and is appropriate
//   - The type 'MSGPTR' (pmsg) is unknown.
	PyObject *obpmsg = PyObject_FromMSG(pmsg);
	if (obpmsg==NULL) return MAKE_PYCOM_GATEWAY_FAILURE_CODE("TranslateAccelerator");
	HRESULT hr=InvokeViaPolicy("TranslateAccelerator", NULL, "O", obpmsg);
	Py_DECREF(obpmsg);
	return hr;
}

//===========================
static struct PyMethodDef preview_methods[] = {{NULL}};

PyObject *PyInit__preview(void)
{
	static PyModuleDef _preview_def = {
		PyModuleDef_HEAD_INIT,
		"_previewer",
		"Preview Handler Interface",
		-1,
		preview_methods
		};
	PyObject *module=PyModule_Create(&_preview_def);
        PyCom_RegisterClientType(&PyIPreviewHandler::type, &IID_IPreviewHandler);
	return module;
}
